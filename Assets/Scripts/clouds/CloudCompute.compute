#pragma kernel SpawnCloudParticles
#pragma kernel UpdateClouds

// Particle structure matching the C# side
struct CloudParticle
{
    float3 position;    // 16 bytes (12 + 4 padding)
    float size;         // 4 bytes
    float baseSize;     // 4 bytes
    float scaleSpeed;   // 4 bytes
    float timeOffset;   // 4 bytes
    float3 velocity;    // 16 bytes (12 + 4 padding)
    int inCloud;        // 4 bytes
    // Total: 52 bytes
};

// Buffers
RWStructuredBuffer<CloudParticle> Particles;
AppendStructuredBuffer<float4> RenderBuffer;

// Spawn parameters
int particleCount;
int spawnIterations;
int noiseLayerCount;
float lacunarity;
float persistence;
float noiseScale;
float sizeMin;
float sizeMax;
float cloudHeight;
float heightVariance;
float minHeightPercent; // Minimum height as percentage of cloudHeight (e.g. 0.8 = 80% of cloudHeight)
float maxHeightPercent; // Maximum height as percentage of cloudHeight (e.g. 1.2 = 120% of cloudHeight)

// Update parameters
float3 playerPos;
float3 playerDir;
float playerSpeed;
float renderThresholdDst;
float collisionRadius;
float scaleAmplitude;
float shrinkSpeed;
float time;
float deltaTime;

static const float PI = 3.14159265359;

// Hash function from www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
void updatePrngState(inout uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
}

float randomValue(inout uint prngState)
{
    updatePrngState(prngState);
    return prngState / 4294967295.0; // Scale random number to range [0, 1]
}

// Random number (gaussian distribution with mean=0; sd=1) Thanks to stackoverflow.com/a/6178290
float randomGauss(inout uint prngState)
{
    return sqrt(-2 * log(randomValue(prngState))) * cos(2 * PI * randomValue(prngState));
}

// Thanks to math.stackexchange.com/a/1585996
float3 randomPointOnSphere(inout uint prngState)
{
    // Use spherical coordinates for better distribution
    float theta = 2.0 * PI * randomValue(prngState);
    float phi = acos(1.0 - 2.0 * randomValue(prngState));
    
    float x = sin(phi) * cos(theta);
    float y = sin(phi) * sin(theta);
    float z = cos(phi);
    
    return float3(x, y, z);
}

// Helper functions for simplex noise - must be declared before snoise
float4 permute(float4 x) { return fmod(((x*34.0)+1.0)*x, 289.0); }
float4 taylorInvSqrt(float4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

// Simplex noise function (simplified version)
// From: https://github.com/keijiro/NoiseShader
float snoise(float3 v)
{
    const float2 C = float2(1.0/6.0, 1.0/3.0);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);

    // First corner
    float3 i  = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);

    // Other corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

    float3 x1 = x0 - i1 + 1.0 * C.xxx;
    float3 x2 = x0 - i2 + 2.0 * C.xxx;
    float3 x3 = x0 - 1. + 3.0 * C.xxx;

    // Permutations
    i = fmod(i, 289.0);
    float4 p = permute(permute(permute(
                i.z + float4(0.0, i1.z, i2.z, 1.0))
              + i.y + float4(0.0, i1.y, i2.y, 1.0))
              + i.x + float4(0.0, i1.x, i2.x, 1.0));

    // Gradients
    float n_ = 1.0/7.0; // N=7
    float3 ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

    float4 x = x_ *ns.x + ns.yyyy;
    float4 y = y_ *ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

    float4 s0 = floor(b0)*2.0 + 1.0;
    float4 s1 = floor(b1)*2.0 + 1.0;
    float4 sh = -step(h, float4(0,0,0,0));

    float4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    float4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

    float3 p0 = float3(a0.xy,h.x);
    float3 p1 = float3(a0.zw,h.y);
    float3 p2 = float3(a1.xy,h.z);
    float3 p3 = float3(a1.zw,h.w);

    // Normalise gradients
    float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Mix final noise value
    float4 m = max(0.6 - float4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m*m, float4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));
}

float fractalNoise(int numLayers, float lacunarity, float persistence, float scale, float3 pos)
{
    float noise = 0;
    float frequency = scale;
    float amplitude = 1;
    
    for (int i = 0; i < numLayers; i++)
    {
        noise += (snoise(pos * frequency) * 2 - 1) * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    return noise;
}

[numthreads(64,1,1)]
void SpawnCloudParticles(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)particleCount) return;
    
    uint prngState = id.x;
    float maxNoiseVal = -1000000.0;
    float3 spawnPoint = float3(0, 0, 0);
    
    // Generate n random points around sphere, and pick the one with the greatest noise value
    for (int i = 0; i < spawnIterations; i++)
    {
        float3 candidatePoint = randomPointOnSphere(prngState);
        float noise = fractalNoise(noiseLayerCount, lacunarity, persistence, noiseScale, candidatePoint);
        if (noise > maxNoiseVal)
        {
            maxNoiseVal = noise;
            spawnPoint = candidatePoint;
        }
    }
    
    // Calculate size of particle based on noise value at spawn pos
    float t = smoothstep(-0.5, 0.5, maxNoiseVal);
    float size = lerp(sizeMin, sizeMax, t);
    
    // Apply height with variance but constrained to atmospheric shell
    float minHeight = cloudHeight * minHeightPercent;
    float maxHeight = cloudHeight * maxHeightPercent;
    float heightRange = maxHeight - minHeight;
    
    // Use Gaussian for height distribution within the allowed range
    float normalizedHeight = (randomGauss(prngState) * 0.5 + 0.5); // Convert from [-inf,inf] to [0,1] range
    float height = lerp(minHeight, maxHeight, normalizedHeight);
    
    // Ensure height stays within bounds (shouldn't be necessary with proper normalization, but safe)
    height = clamp(height, minHeight, maxHeight);
    
    Particles[id.x].position = spawnPoint * height;
    Particles[id.x].size = size;
    Particles[id.x].baseSize = size;
    Particles[id.x].scaleSpeed = lerp(0.15, 0.75, randomValue(prngState));
    Particles[id.x].timeOffset = randomValue(prngState) * 2 * PI;
    Particles[id.x].velocity = float3(0, 0, 0);
    Particles[id.x].inCloud = 1;
}

[numthreads(64,1,1)]
void UpdateClouds(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)particleCount) return;
    
    CloudParticle particle = Particles[id.x];
    float3 offsetToPlayer = playerPos - particle.position;
    float dstFromPlayer = length(offsetToPlayer);
    
    // Always add particles within render distance to the render buffer
    if (dstFromPlayer < renderThresholdDst)
    {
        RenderBuffer.Append(float4(particle.position, particle.size));
        
        // Only update particle if it needs to be modified
        if (particle.inCloud == 1)
        {
            // If the player comes near to a particle, then knock it out of the cloud
            if (dstFromPlayer < collisionRadius)
            {
                float3 collisionDir = -offsetToPlayer / dstFromPlayer;
                float3 particleVelocity = collisionDir * lerp(0.3, 1, dot(collisionDir, playerDir)) * playerSpeed;
                Particles[id.x].velocity = particleVelocity;
                Particles[id.x].inCloud = 0;
            }
            else
            {
                // Scale particle with sin wave to make clouds look a bit more alive
                Particles[id.x].size = particle.baseSize + sin(time * particle.scaleSpeed + particle.timeOffset) * scaleAmplitude;
            }
        }
        else if (particle.size > 0)
        {
            // Only update knocked-out particles if they still have size
            Particles[id.x].size = max(0, particle.size - deltaTime * shrinkSpeed);
            Particles[id.x].position += particle.velocity * deltaTime;
        }
    }
} 